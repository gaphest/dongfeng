/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$arrow-name: 'arrow';
$arrow-x: 0px;
$arrow-y: 0px;
$arrow-offset-x: 0px;
$arrow-offset-y: 0px;
$arrow-width: 12px;
$arrow-height: 20px;
$arrow-total-width: 240px;
$arrow-total-height: 809px;
$arrow-image: 'sprite.png';
$arrow: (0px, 0px, 0px, 0px, 12px, 20px, 240px, 809px, 'sprite.png', 'arrow', );
$logo-name: 'logo';
$logo-x: 0px;
$logo-y: 50px;
$logo-offset-x: 0px;
$logo-offset-y: -50px;
$logo-width: 147px;
$logo-height: 129px;
$logo-total-width: 240px;
$logo-total-height: 809px;
$logo-image: 'sprite.png';
$logo: (0px, 50px, 0px, -50px, 147px, 129px, 240px, 809px, 'sprite.png', 'logo', );
$offer-1-name: 'offer-1';
$offer-1-x: 0px;
$offer-1-y: 209px;
$offer-1-offset-x: 0px;
$offer-1-offset-y: -209px;
$offer-1-width: 240px;
$offer-1-height: 180px;
$offer-1-total-width: 240px;
$offer-1-total-height: 809px;
$offer-1-image: 'sprite.png';
$offer-1: (0px, 209px, 0px, -209px, 240px, 180px, 240px, 809px, 'sprite.png', 'offer-1', );
$offer-2-name: 'offer-2';
$offer-2-x: 0px;
$offer-2-y: 419px;
$offer-2-offset-x: 0px;
$offer-2-offset-y: -419px;
$offer-2-width: 239px;
$offer-2-height: 180px;
$offer-2-total-width: 240px;
$offer-2-total-height: 809px;
$offer-2-image: 'sprite.png';
$offer-2: (0px, 419px, 0px, -419px, 239px, 180px, 240px, 809px, 'sprite.png', 'offer-2', );
$offer-3-name: 'offer-3';
$offer-3-x: 0px;
$offer-3-y: 629px;
$offer-3-offset-x: 0px;
$offer-3-offset-y: -629px;
$offer-3-width: 239px;
$offer-3-height: 180px;
$offer-3-total-width: 240px;
$offer-3-total-height: 809px;
$offer-3-image: 'sprite.png';
$offer-3: (0px, 629px, 0px, -629px, 239px, 180px, 240px, 809px, 'sprite.png', 'offer-3', );
$spritesheet-width: 240px;
$spritesheet-height: 809px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($arrow, $logo, $offer-1, $offer-2, $offer-3, );
$spritesheet: (240px, 809px, 'sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
